# taskfile reference: https://taskfile.dev/api/
version: '3'
dotenv: [".env.local", ".env.dev", ".env"]
env:
  SF: "symfony"
  SFC: "symfony console"
  PHP: "symfony php"

tasks:
  # initialisation du projet
  check:reqs:
    desc: Test des prérequis
    cmds:
      - $SF local:check:requirements

  init:
    run: once
    desc: initialisation du projet après clonage
    cmds:
      - composer install
      - yarn install
      - docker compose up -d
      - $SF local:server:ca:install
      - $SFC d:m:m -n
  
  dev:init:
    desc: préparation au développement
    cmds: # création des certificats et des clés
      - $PHP -r "echo 'OAUTH_PASSPHRASE=';"> {{.ENV}}
      - $PHP -r "echo md5(random_bytes(32)), PHP_EOL;" >> {{.ENV}}
      - $PHP -r "echo 'OAUTH_ENCRYPTION_KEY=';" >> {{.ENV}}
      - $PHP -r "echo md5(random_bytes(32)), PHP_EOL;" >> {{.ENV}}
      - task dev:create-keys
    vars:
      ENV: ".env.dev"

  dev:create-keys:
    desc: création des clés d'authentification
    cmds:
      - $PHP -r "@mkdir('var/keys');"
      - openssl genrsa -aes128 -passout pass:$OAUTH_PASSPHRASE -out var/keys/private.key 2048
      - openssl rsa -in var/keys/private.key -passin pass:$OAUTH_PASSPHRASE -pubout -out var/keys/public.key

  dev:start:
    desc: Procédure à lancer au début du développement
    cmds:
      - docker compose start
      - symfony local:server:start -d
      - task dev:browse

  dev:browse:
      - symfony open:local

  dev:stop:
    desc: Procédure à lancer en fin de développement
    cmds:
      - docker compose stop
      - symfony local:server:stop

  dev:watch:
    desc: Surveille les changements
    cmds:
      - echo "watch"

  dev:tests:
    desc: Réalise les tests
    cmds:
      - echo "Tests"